"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"   .vimrc file - Place in ~/
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Source vimrc from scrooloose then override settings here
" https://github.com/akitaonrails/vimfiles.git
"source ~/.vim/vimrc - old

" Set encoding to UTF-8
if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
    set fileencodings=utf-8,latin1
endif

if has ('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

"Enable dynamic path (plugins/themes)
"execute pathogen#infect()

"Enable powerline
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Enable managed plugins via NeoBundle
"
call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'altercation/vim-colors-solarized'    "Solarized colorscheme
NeoBundle 'Shougo/neocomplete.vim'              "Autocomplete
NeoBundle 'Shougo/unite.vim'                    "Does everything?
NeoBundle 'Shougo/neomru.vim'                   "Most Recently Used filelist for Unite

NeoBundle 'Shougo/vimproc.vim', {
            \ 'build' : {
            \ 'unix' : 'make -f make_unix.mak',
            \ 'windows' : 'tools\\update-dll-mingw',
            \ },
            \ }                                 "Allow for background processes

NeoBundle 'mbbill/undotree'                     "Undo tree plugin
call neobundle#end()
filetype plugin indent on                       "Required per docs
NeoBundleCheck                                  "Check for new plugins at boot
"NeoBundleCheckUpdate                            "Check for updates at boot
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   VIM UI settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible                  " Don't need to be compatible with vi
set nomodeline                    " Don't allow modelines (security issues)

set viminfo='20,\"100             " Read/write a .viminfo file, don't store more
                                  " than 100 lines of registers
" UI Navication related
set backspace=indent,eol,start    " Allow backspacing over autoindent, line breaks, and start of insert
set laststatus=2                  " Always show status line in last window

set ruler                         " Show the cursor position all the time
set relativenumber                " Show distance instead of absolute line numbers

set scrolloff=0                   " Don't pad cursur from edge of the screen
set showcmd                       " Show leader key timeout
set noshowmode                      " Show Insert, Replace, Visual mode

set ttyfast                       " Improved redrawing & copy/paste from X

set wildmenu                      " Enable tab completion
set wildmode=list:longest         " For completion, list all options and match longest

" Setup spacing
set tabstop=2                     " set number of columns for tabs
set shiftwidth=4                  " set number of columns to shift (<< or >>)
set softtabstop=2                 " set number of columns for tab in insert mode
set smarttab                      " auto tabs
set expandtab                     " expand tabs to spaces
set autoindent                    " automatically indent lines

" UI color scheme
set t_Co=16                       " Set terminato to use 16 colors over 256
set background=dark               " dark background
let g:solarized_termcolors=16     " use normal solarized colors
colorscheme solarized             " use solarized theme
"colorscheme desert256            " backup colors if solarized isn't available
call togglebg#map("<F5>")         " Toggle bg between light/dark background

" UI show settings
syntax on                         " Set syntax highlighting on
set showmatch                     " show matching brackets
set hlsearch                      " Highlight search matches
set gdefault                      " Default to replacing all occurances on a line

" Use normal RegExes instead of Vim's
nnoremap / /\v
vnoremap / /\v

" Next line is used to highlight what list finds
"hi SpecialKey ctermfg=136 ctermbg=none guifg=#af8700 guibg=none
hi SpecialKey ctermfg=166 ctermbg=none guifg=#d75f00 guibg=none
set listchars=tab:â–¸\ ,trail:Â¬     " Find tabs and mark with 'â–¸' and trailing spaces with 'Â¬'
set list                          " Use list to match lcs
"set mat=5

"hi ExtraWhitespace ctermbg=Red guibg=Red
"match ExtraWhitespace /\s\+$/
"autocmd BufWinEnter * match ExtraWhitespace /\s\s+$/
"autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
"autocmd InsertLeave * match ExtraWhitespace /\s\+$/
"autocmd BufWinLeave * match call clearmatches()

"autocmd InsertEnter * syn clear EOLWS | syn match EOLWS excludenl /\s\+\%#\@<!$/
"autocmd InsertLeave * syn clear EOLWS | syn match EOLWS excludenl /\s\+$/
"hi EOLWS ctermbg=darkgreen guibg=red

"autocmd InsertEnter * set nolist
"autocmd InsertLeave * set list

" Enable trailing whitespace highlighting
"hi ShowTrailingWhitespace ctermbg=darkgreen guibg=darkgreen

"autocmd colorscheme * hi ShowTrailingWhitespace Error ctermbg=red guibg=red
"autocmd colorscheme * hi ExtraWhitespace ctermbg=Red guibg=Red
"autocmd colorscheme * hi Tab guifg=Red ctermbg=Red

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
"if &t_Co > 2 || has("gui_running")
"  syntax on
"  "colorscheme torte
"  set hlsearch
"endif

"if &term=="xterm"
"     set t_Co=8
"     set t_Sb=[4%dm
"     set t_Sf=[3%dm
"endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   Code navigation settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Undo settings
set undodir=~/.vim/undo           " Set undo directory
set undofile                      " Enable undo files

" Gundo - pretty undo tree
"nnoremap <F3> :GundoToggle<CR>

" Key mappings

" Leader Key + Space to clear search highlighting
nnoremap <leader><space> :noh<cr> 
" Leader + W to strip all trailing whitespace in current file
"nnoremap <leader>W :%s/\s\+\$//<cr> " :let @/=''<CR> 

" Path to ctags file for taglist
let Tlist_Ctags_Cmd = "/usr/bin/ctags"
"let Tlist_Win_Width = 50
"map <F4> :TlistToggle<CR><C-W>h
map <F5> :!/usr/bin/ctags -R /home/sachit/ndc/externalsrc/ -f /home/sachit/src/externalsrc.tags<CR>

" Path to ctags file
set tags+=~/src/externalsrc.tags
"set tags+=tags;/home/bakshs/.vim/tags/*.tags
"set tags+=/home/bakshs/.vim/tags/bmc.tags
"set tags+=/home/bakshs/.vim/tags/bmc1.tags

" setup syntax highlighting for .yxx files
"au BufRead,BufNewFile *.yxx set filetype=pccts

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Neocomplete
"
" Enable completion
let g:neocomplete#enable_at_startup = 1

" Enable Omni Completion
autocmd FileType c setlocal omnifunc=ccomplete#Complete

" <TAB>: completion
inoremap <expr><TAB> pumvisible()? "\<C-n>" : "\<TAB>"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UndoTree
"
let g:undotree_WindowLayout = 4
let g:undotree_SplitWidth = 40
let g:undotree_DiffpaneHeight = 15
let g:undotree_DiffAutoOpen = 1
let g:undotree_SetFocusWhenToggle = 1
nnoremap <F3> :UndotreeToggle<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Unite
"
" Set pt (the_platinum_searcher) or ag (the_silver_searcher) as the default grep utility
if executable('pt')
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts = '--nocolor --nogroup --ignore ''.m4'' --ignore ''.git'''
    let g:unite_source_grep_recursive_opt = ''
elseif executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nocolor --nogroup --column --ignore ''.m4'' --ignore ''.git'''
    let g:unite_source_grep_recursive_opt = ''
endif

" Don't search forever
let g:unite_source_grep_max_candidates = 350

" Alow yank/history searching
let g:unite_source_history_yank_enable = 1

" Some keymappings
nnoremap [unite] <Nop>
nmap <space> [unite]

map [unite]g :Unite -no-split grep:/home/sachit/src/ndc/externalsrc/<CR>
map [unite]G :Unite -no-split grep:/home/sachit/src/ndc/externalsrc/::<c-r>=expand("<cword>")<CR><CR>
map [unite]y :Unite history/yank<CR>
map [unite]b :Unite buffer<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CScope support
"if has("cscope") && filereadable("/usr/bin/cscope")
"    set cscopetag       " Use both cscope & ctag for 'ctrl-]', ':ta', and 'vim -t'
"   set csprg=/usr/bin/cscope
"   set csto=0
"   set cst
"   set nocsverb

    " Add in bmc cscope file
"    cs add /home/bakshs/.vim/tags/bmc1.tags

   " add any database in current directory
"   if filereadable("cscope.out")
"      cs add cscope.out
   " else add database pointed to by environment
"   elseif $CSCOPE_DB != ""
"      cs add $CSCOPE_DB
"   endif

"   set csverb
"endif
" Map Ctrl-\ for cscope
"nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
"nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

" Only do this part when compiled with support for autocommands
"if has("autocmd")
  " In text files, always limit the width of text to 78 characters
"  autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
"  autocmd BufReadPost *
"  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
"  \   exe \"normal! g'\"" |
"  \ endif
"endif

" Add hex mode support to look at binary and hex files
" ex command for toggling hex mode - define mapping if desired
command -bar Hexmode call ToggleHex()

" helper function to toggle hex mode
function ToggleHex()
     " hex mode should be considered a read-only operation
     " save values for modified and read-only for restoration later,
     " and clear the read-only flag for now
     let l:modified=&mod
     let l:oldreadonly=&readonly
     let &readonly=0
     let l:oldmodifiable=&modifiable
     let &modifiable=1
     if !exists("b:editHex") || !b:editHex
          " save old options
          let b:oldft=&ft
          let b:oldbin=&bin
          " set new options
          setlocal binary " make sure it overrides any textwidth, etc.
          let &ft="xxd"
          " set status
          let b:editHex=1
          " switch to hex editor
          %!xxd
     else
          " restore old options
          let &ft=b:oldft
          if !b:oldbin
               setlocal nobinary
          endif
          " set status
          let b:editHex=0
          " return to normal editing
          %!xxd -r
     endif
     " restore values for modified and read only state
     let &mod=l:modified
     let &readonly=l:oldreadonly
     let &modifiable=l:oldmodifiable
endfunction
